function Point(e, t) { this.x = e || null; this.y = t || null } function mouseToCanvas(e) { if (e === undefined) return; var t; t = g.cv.getBoundingClientRect(); $("#test").text("CORD: " + e.x); return { x: (e.x - t.left) * (g.cv.width / t.width), y: (e.y - t.top) * (g.cv.height / t.height) } } function getKey(e) { if (e === undefined) return null; e = $.event.fix(e); return e.keyCode || e.charCode || e.which } function stopSound(e) { e.pause(); e.currentTime = 0; return e } function fadeVolume(e, t) { var n = .01, r = 50; if (e.volume > n) { setTimeout(function () { e.volume -= n; fadeVolume(e, t) }, r) } else { typeof t !== "function" || t() } } function ieVer() { var e = navigator.userAgent.toLowerCase(); return e.indexOf("msie") != -1 ? parseInt(e.split("msie")[1]) : false } function Rank(e) { this.xml; this.writer; this.init(e) } function updateTime() { if (start === null) return; $(".voiceTime span").text(g.elapsedTime = calculateTime(start).substring(3, 8)) } function calculateTime(e) { var t = (new Date - e) / 1e3; var n = Math.floor(t / 3600); t = t % 3600; var r = Math.floor(t / 60); t = t % 60; var i = Math.floor(t); n = timeString(n); r = timeString(r); i = timeString(i); return n + ":" + r + ":" + i } function startTiming() { start = new Date } function timeString(e) { return (e < 10 ? "0" : "") + e } function appendCard(e, t, n, r, i, s) { g.gcards.push(new Card(e, t, n, r, { name: i, src: s })) } function appendCardsToMatrix() { for (i = 0; i <= board.rows; i++) board.matrix[i] = new Array; var e = 0; var t = 0; var n = 0; var r, s; while (e < board.cols * board.rows) { s = Math.floor(Math.random() * board.cols + 0); r = Math.floor(Math.random() * board.rows + 0); if (board.matrix[r][s]) continue; else { res = getNextFace(); t = s * 65 + 25; n = 65 * r + 25; appendCard(t, n, card.w, card.h, res, src[res]); board.matrix[r][s] = true; e++ } } } function getNextFace() { for (var e in faces) { if (faces[e] > 0) { faces[e]--; return e } } } function Card(e, t, n, r, i) { this.position = new Point(e, t); this.w = n || undefined; this.h = 4; this.face = { name: i.name, src: i.src }; this.linkedTo = this.getFaceLink(); this.action = null; this.backBg = src.cardback; this.acc = 2.5; this.vel = 0; this.guessed = false; this.mouseOver = false } function Number(e, t, n) { this.position = new Point(e || undefined, t || undefined); this.positionStart = new Point(e || undefined, t || undefined); this.vel = 0; this.acc = .1; this.src = n || undefined; this.remove = false; this.opacity = 1; this.w = 20; this.h = 18 } function init() { p.attempts = 0; p.points = 0; board.position.x = g.cv.width / 2 - board.width / 2; board.position.y = g.cv.height / 2 - board.height / 2; appendCardsToMatrix(); bgBoard = src["bgBoard" + Math.floor(Math.random() * 3 + 1)]; startTiming() } function loop() { update(); g.r.render(); requestAnimationFrame(loop) } function update() { updateTime(); if (!g.start) { g.timeToStart = Math.floor(g.elapsedTime.substring(4, g.elapsedTime.length)); if (g.timeToStart === 4) { snds.cartoonSlide[type][0].play(); for (var e in g.gcards) g.gcards[e].action = a_sdown; g.start = true } return } if (g.maxCards > 1) checkCards(); else theEnd(); if (p.name === null) return; for (var e in g.gcards) { g.gcards[e].update(); if (g.gcards[e] instanceof Number) if (g.gcards[e].remove === true) { g.gcards.splice(e, 1); continue } } } function checkCards() { if (g.firstCard !== null) if (g.firstCard.face.name === "skull" && !g.firstCard.isAnimating()) { stopSound(snds.skullcard[type][0]).play(); g.firstCard.action = a_sdown; p.points -= .5; g.gcards.push(new Number(g.firstCard.position.x + (g.firstCard.w / 2 - 30), g.firstCard.position.y, src.minusHalf)); return g.firstCard = null } if (g.firstCard !== null && g.secondCard !== null) if (!g.firstCard.isAnimating() && !g.secondCard.isAnimating()) if (g.firstCard.linkedTo !== g.secondCard.face.name) { g.firstCard.action = a_sdown; g.secondCard.action = a_sdown; if (g.secondCard.face.name === "skull") { p.points -= .5; stopSound(snds.skullcard[type][0]).play(); g.gcards.push(new Number(g.secondCard.position.x + (g.secondCard.w / 2 - 30), g.secondCard.position.y, src.minusHalf)) } if (g.firstCard.face.name === "peppeS") snds.peppeS[type][Math.floor(Math.random() * snds.peppeS[type].length + 0)].play(); else if (g.firstCard.face.name === "rosarioM") snds.rosarioM[type][Math.floor(Math.random() * snds.rosarioM[type].length + 0)].play(); else if (g.firstCard.face.name === "peppeF") snds.peppeF[type][Math.floor(Math.random() * snds.peppeF[type].length + 0)].play(); else if (g.firstCard.face.name === "richardB") { snds.richardB[type][Math.floor(Math.random() * snds.richardB[type].length + 0)].play(); $("#display").effect("shake", { times: 30, distance: 2 }, 1700) } else stopSound(snds.cardswrong[type][0]).play(); combo = false; p.wrongs++; g.lastGuessed = null } else { stopSound(snds.cardsmatch[type][0]).play(); g.firstCard.guessed = g.secondCard.guessed = true; g.gcards.push(new Number(g.firstCard.position.x + (g.firstCard.w / 2 - 30), g.firstCard.position.y, src.plusOne)); g.gcards.push(new Number(g.secondCard.position.x + (g.secondCard.w / 2 - 30), g.secondCard.position.y, src.plusOne)); if (g.lastGuessed !== null) { var e = calculateTime(g.lastGuessed); if (Math.floor(e.substring(7, e.length)) < 3) { stopSound(snds.combo[type][0]).play(); g.gcards.push(new Number(g.secondCard.position.x + (g.secondCard.w / 2 - 30), g.secondCard.position.y, src.combo)); p.points += 3; if (combo === true) { g.gcards.push(new Number(g.secondCard.position.x + (g.secondCard.w / 2 - 10), g.secondCard.position.y, src._3combo)); stopSound(snds.yes[type][0]).play() } combo = true } } g.lastGuessed = new Date; g.firstCard = g.secondCard = null; g.maxCards -= 2; p.points += 2 } } function loadSrcs(e) { var t = new ImageLoader; t.addSrc(src.bgBoard1, function (e) { src.bgBoard1 = e }); t.addSrc(src.bgBoard2, function (e) { src.bgBoard2 = e }); t.addSrc(src.bgBoard3, function (e) { src.bgBoard3 = e }); t.addSrc(src.bgPat, function (e) { src.bgPat = e }); t.addSrc(src.cardback, function (e) { src.cardback = e }); t.addSrc(src.cardbackHover, function (e) { src.cardbackHover = e }); t.addSrc(src.skull, function (e) { src.skull = e }); t.addSrc(src.peppeS, function (e) { src.peppeS = e }); t.addSrc(src.rosarioM, function (e) { src.rosarioM = e }); t.addSrc(src.peppeF, function (e) { src.peppeF = e }); t.addSrc(src.akg, function (e) { src.akg = e }); t.addSrc(src.plusOne, function (e) { src.plusOne = e }); t.addSrc(src.feet, function (e) { src.feet = e }); t.addSrc(src.dick, function (e) { src.dick = e }); t.addSrc(src.guitar, function (e) { src.guitar = e }); t.addSrc(src.richardB, function (e) { src.richardB = e }); t.addSrc(src.minusHalf, function (e) { src.minusHalf = e }); t.addSrc(src.clock20, function (e) { src.clock20 = e }); t.addSrc(src.star20, function (e) { src.star20 = e }); t.addSrc(src.error20, function (e) { src.error20 = e }); t.addSrc(src.combo, function (e) { src.combo = e }); t.addSrc(src._3combo, function (e) { src._3combo = e }); t.addSrc(src.n1, function (e) { src.n1 = e }); t.addSrc(src.n2, function (e) { src.n2 = e }); t.addSrc(src.n3, function (e) { src.n3 = e }); t.addSrc(src.trophy, function (e) { src.trophy = e }); t.oncomplete = function () { loadSounds(e) }; t.onerror = function (e) { alert("Operation failed while loading: " + e.src) }; t.onprogress = function (e) { appendPercentage("CARICO LE RISORSE CATAFRATTE.." + Math.floor(this.percentage) + "%") }; return t } function loadSounds(e) { var t = new SoundLoader; for (var n in types) if (Modernizr.audio[types[n]]) { type = types[n]; break } t.addSrc(snds.bgMusic1[type][0], function (e) { snds.bgMusic1[type][0] = e }); t.addSrc(snds.bgMusic2[type][0], function (e) { snds.bgMusic2[type][0] = e }); t.addSrc(snds.bgMusic3[type][0], function (e) { snds.bgMusic3[type][0] = e }); t.addSrc(snds.bgMusic4[type][0], function (e) { snds.bgMusic4[type][0] = e }); t.addSrc(snds.cartoonSlide[type][0], function (e) { snds.cartoonSlide[type][0] = e; snds.cartoonSlide[type][0].volume = sndVol }); t.addSrc(snds.pop[type][0], function (e) { snds.pop[type][0] = e; snds.pop[type][0].volume = sndVol }); t.addSrc(snds.navslide[type][0], function (e) { snds.navslide[type][0] = e; snds.navslide[type][0].volume = sndVol }); t.addSrc(snds.cardSlideUp[type][0], function (e) { snds.cardSlideUp[type][0] = e; snds.cardSlideUp[type][0].volume = sndVol }); t.addSrc(snds.cardsmatch[type][0], function (e) { snds.cardsmatch[type][0] = e; snds.cardsmatch[type][0].volume = sndVol }); t.addSrc(snds.cardswrong[type][0], function (e) { snds.cardswrong[type][0] = e; snds.cardswrong[type][0].volume = sndVol / 2.5 }); t.addSrc(snds.inputok[type][0], function (e) { snds.inputok[type][0] = e }); t.addSrc(snds.skullcard[type][0], function (e) { snds.skullcard[type][0] = e }); t.addSrc(snds.combo[type][0], function (e) { snds.combo[type][0] = e }); t.addSrc(snds.select[type][0], function (e) { snds.select[type][0] = e }); t.addSrc(snds.yes[type][0], function (e) { snds.yes[type][0] = e }); t.addSrc(snds.peppeS[type][0], function (e) { snds.peppeS[type][0] = e; snds.peppeS[type][0].volume = sndVol }); t.addSrc(snds.peppeS[type][1], function (e) { snds.peppeS[type][1] = e; snds.peppeS[type][1].volume = sndVol }); t.addSrc(snds.rosarioM[type][0], function (e) { snds.rosarioM[type][0] = e; snds.rosarioM[type][0].volume = sndVol }); t.addSrc(snds.rosarioM[type][1], function (e) { snds.rosarioM[type][1] = e; snds.rosarioM[type][1].volume = sndVol }); t.addSrc(snds.rosarioM[type][2], function (e) { snds.rosarioM[type][2] = e; snds.rosarioM[type][2].volume = sndVol }); t.addSrc(snds.peppeF[type][0], function (e) { snds.peppeF[type][0] = e; snds.peppeF[type][0].volume = 1 }); t.addSrc(snds.peppeF[type][1], function (e) { snds.peppeF[type][1] = e; snds.peppeF[type][1].volume = 1 }); t.addSrc(snds.peppeF[type][2], function (e) { snds.peppeF[type][2] = e; snds.peppeF[type][2].volume = 1 }); t.addSrc(snds.richardB[type][0], function (e) { snds.richardB[type][0] = e; snds.richardB[type][0].volume = sndVol * .5 }); t.addSrc(snds.richardB[type][1], function (e) { snds.richardB[type][1] = e; snds.richardB[type][1].volume = sndVol * .5 }); t.addSrc(snds.richardB[type][2], function (e) { snds.richardB[type][2] = e; snds.richardB[type][2].volume = sndVol * .5 }); t.addSrc(snds.richardB[type][3], function (e) { snds.richardB[type][3] = e; snds.richardB[type][3].volume = sndVol * .5 }); t.onprogress = function (e) { appendPercentage("CARICO LE ASSURDITA' SONORE..." + Math.floor(this.percentage) + "%") }; t.onerror = function (e) { alert("TEST :::: Operation failed while loading: " + e.src) }; t.oncomplete = function (t) { if (e !== undefined) e() }; t.startLoading() } function loadPage() { $("#display").css("visibility", "visible").hide().css("margin-top", "-600px").show().animate({ marginTop: $(document).height() / 2 - 30 - $("#display").height() / 2 - 50 }, { duration: 500, start: snds.cartoonSlide[type][0].play(), complete: function () { loadLeftMenu(); wre.addEvent(function () { $("#display").css("marginTop", $(document).height() / 2 - 30 - $("#display").height() / 2 - 50) }, "wndResize") } }); init(); loop() } function slideUpCover(e) { if ($("#curtain")[0]) $("#curtain").slideUp("slow", function () { if (e !== undefined && e) e() }) } function appendPercentage(e) { if (e !== undefined) $("#curtain .percentage").text(e) } function printPoints() { $(".guessed").text(p.points); $(".wrongs").text(p.wrongs) } function startSoundtrack() { snds.bgMusic2[type][0].play(); activeMusic = snds.bgMusic2[type][0]; activeMusic.volume = bgVol; snds.bgMusic2[type][0].onended = function () { snds.bgMusic1[type][0].play(); activeMusic = snds.bgMusic1[type][0]; activeMusic.volume = bgVol; snds.bgMusic1[type][0].onended = function () { snds.bgMusic3[type][0].play(); activeMusic = snds.bgMusic3[type][0]; activeMusic.volume = bgVol; snds.bgMusic3[type][0].onended = startSoundtrack } } } function loadLeftMenu() { loadLi($("#leftMenu li").eq(0)); $(".musicControl").click(function (e) { e = $.event.fix(e); e.preventDefault(); if (!activeMusic.paused) { $(this).text("play music"); return activeMusic.pause() } else { $(this).text("stop music"); return activeMusic.play() } }); $(".rankButton a").click(function (e) { e = $.event.fix(e); e.preventDefault(); stopSound(snds.select[type][0]).play(); var t = $(this).parent().parent(); var n = $(t).css("marginLeft").replace("px", ""); if (Math.floor(n) > -300) $(t).stop(true, false).animate({ marginLeft: "-315px" }, 400); else $(t).stop(true, false).animate({ marginLeft: "-40px" }, 400) }) } function loadLi(e) { var t = -160; if ($(e).hasClass("voiceTxt")) t = -40; $(e).eq(0).animate({ marginLeft: t + "px" }, { duration: 200, start: function () { snds.navslide[type][0].play() }, complete: function () { var e = $(this).next("li"); if (e.length) loadLi(e) } }) } function loadNameForm() { $("#nameForm").css("visibility", "visible").css("left", $(g.cv).offset().left + $(g.cv).width() / 2 - $("#nameForm").width() / 2).css("top", $(g.cv).offset().top).animate({ opacity: 1 }, { duration: 500, complete: function () { $("#nameForm input[type=text]").focus() } }); $("#nameForm input[type=text]").keyup(function (e) { var t = getKey(e); if (t === 13 && $(this).val().replace(/\s+/g, "") !== "") { p.name = $(this).val(); $(this).unbind("keyup"); snds.inputok[type][0].play(); $("#nameForm").effect("highlight", { color: "yellow", times: 10 }, 500, function () { $(this).animate({ left: 0 - ($(this).width() + 20), top: "0px", width: 0, height: 0 }, { duration: 400, complete: function () { loadPage(); $(this).hide() } }) }) } }) } function loadRank() { var e = g.rank.getNodes("player", 200); e.sort(compare); var t = new String; var color; for (var n = 0; n < e.length; n++) { if (n === 0) firstPositionPoints = e[n].points; if (e[n].points === firstPositionPoints) color = '#FDEDC3'; else color = 'transparent'; t += "<tr style=\"background:" + color + ";\"><td>" + (n + 1) + "</td><td>" + e[n].name + '</td><td style="color:#3A6B3B;">' + e[n].points + '</td><td style="color:#7A3018;">' + e[n].errors + "</td><td>" + e[n].time + "</td></tr>" } $(".rankTable tbody").html(t) } function compare(e, t) { if (t.points < e.points) return -1; if (t.points > e.points) return 1; return 0 } function saveRank() { g.rank.addNode(p.name, p.wrongs, g.elapsedTime, p.points) } function theEnd() { if (g.playing === true) { saveRank(); g.playing = false; for (var e in g.gcards) if (g.gcards[e] instanceof Card) g.gcards[e].action = a_right; g.gcards.push(g.r.finalScreen = new FinalScreen); fadeVolume(activeMusic, function () { activeMusic.onended = null; activeMusic = snds.bgMusic4[type][0]; activeMusic.volume = bgVol; activeMusic.play() }) } } function Renderer() { this.finalScreen } function FinalScreen() { this.w = g.cv.width; this.h = g.cv.height; this.vel = 0; this.acc = .03; this.alpha = 1; this.position = new Point(0, 0 - this.h); this.z = .5; this.total = 0 } function isFunction(e) { var t = {}; return e && t.toString.call(e) === "[object Function]" } var g = { cv: null, ctx: null, r: null, maxCards: 49, gcards: new Array, _in: null, firstCard: null, secondCard: null, canSelect: function () { return g.firstCard === null || g.secondCard === null }, rank: null, start: false, elapsedTime: 0, playing: true, lastGuessed: null }; var firstPositionPoints; var wre = null; var p = { points: 0, wrongs: 0, name: null }; var board = { width: 455, height: 455, position: new Point, cols: 7, rows: 7, matrix: new Array }; var src = { bgPat: "src/redox_01.png", bgBoard1: "src/boardbgs/1bw.jpg", bgBoard2: "src/boardbgs/2bw.jpg", bgBoard3: "src/boardbgs/3bw.jpg", cardback: "src/cardbg/cardback.png", clock20: "src/icons/clock20.png", star20: "src/icons/star.png", error20: "src/icons/error.png", cardbackHover: "src/cardbg/cardbackHover.png", plusOne: "src/plusOne.png", minusHalf: "src/minusHalf.png", skull: "src/faces/skull.png", peppeS: "src/faces/peppeS.jpg", akg: "src/faces/1kg.png", rosarioM: "src/faces/rosarioM.jpg", dick: "src/faces/dick.jpg", peppeF: "src/faces/peppeF.png", feet: "src/faces/feet.png", richardB: "src/faces/richardB.jpg", guitar: "src/faces/guitar.png", combo: "src/combo.png", _3combo: "src/3combo.png", n1: "src/numbers/n1.png", n2: "src/numbers/n2.png", n3: "src/numbers/n3.png", trophy: "src/trophy.png" }; var bgBoard = null; var snds = { inputok: { mp3: new Array("src/sounds/inputok.mp3"), ogg: new Array("src/sounds/inputok.ogg") }, yes: { mp3: new Array("src/sounds/yes.mp3"), ogg: new Array("src/sounds/yes.ogg") }, bgMusic1: { mp3: new Array("src/sounds/st1.mp3"), ogg: new Array("src/sounds/st1.ogg") }, bgMusic2: { mp3: new Array("src/sounds/st2.mp3"), ogg: new Array("src/sounds/st2.ogg") }, bgMusic3: { mp3: new Array("src/sounds/st3.mp3"), ogg: new Array("src/sounds/st3.ogg") }, bgMusic4: { mp3: new Array("src/sounds/st4.mp3"), ogg: new Array("src/sounds/st4.ogg") }, cartoonSlide: { mp3: new Array("src/sounds/canvasSlideDown.mp3"), ogg: new Array("src/sounds/canvasSlideDown.ogg") }, pop: { mp3: new Array("src/sounds/pop.mp3"), ogg: new Array("src/sounds/pop.ogg") }, navslide: { mp3: new Array("src/sounds/navslide.mp3"), ogg: new Array("src/sounds/navslide.ogg") }, cardSlideUp: { mp3: new Array("src/sounds/card_slideUp.mp3"), ogg: new Array("src/sounds/card_slideUp.ogg") }, cardsmatch: { mp3: new Array("src/sounds/cardsmatch.mp3"), ogg: new Array("src/sounds/cardsmatch.ogg") }, cardswrong: { mp3: new Array("src/sounds/cardswrong.mp3"), ogg: new Array("src/sounds/cardswrong.ogg") }, skullcard: { mp3: new Array("src/sounds/skullcard.mp3"), ogg: new Array("src/sounds/skullcard.ogg") }, peppeS: { mp3: new Array("src/sounds/ps_monella.mp3", "src/sounds/ps_scostumata.mp3"), ogg: new Array("src/sounds/ps_monella.ogg", "src/sounds/ps_scostumata.ogg") }, rosarioM: { mp3: new Array("src/sounds/rm_impotenti.mp3", "src/sounds/rm_diventodonna.mp3", "src/sounds/rm_noncelaf.mp3"), ogg: new Array("src/sounds/rm_impotenti.ogg", "src/sounds/rm_diventodonna.ogg", "src/sounds/rm_noncelaf.ogg") }, peppeF: { mp3: new Array("src/sounds/pf_cafone.mp3", "src/sounds/pf_vattene.mp3", "src/sounds/pf_nonvogliamo.mp3"), ogg: new Array("src/sounds/pf_cafone.ogg", "src/sounds/pf_vattene.ogg", "src/sounds/pf_nonvogliamo.ogg") }, richardB: { mp3: new Array("src/sounds/rb_spaventare.mp3", "src/sounds/rb_dovestavo.mp3", "src/sounds/rb_veronome.mp3", "src/sounds/rb_vogliofare.mp3"), ogg: new Array("src/sounds/rb_spaventare.ogg", "src/sounds/rb_dovestavo.ogg", "src/sounds/rb_veronome.ogg", "src/sounds/rb_vogliofare.ogg") }, select: { mp3: new Array("src/sounds/select.mp3"), ogg: new Array("src/sounds/select.ogg") }, combo: { mp3: new Array("src/sounds/combo.mp3"), ogg: new Array("src/sounds/combo.ogg") } }; var type = ""; var types = ["ogg", "mp3"]; var activeMusic = null; var bgVol = .7; var sndVol = 1; var card = { w: 60, h: 60, marginL: 3, marginT: 2 }; Rank.prototype.init = function (e) { var t = this; $.ajax({ url: "data/rank.xml", dataType: "xml", type: "GET", success: function (n) { t.xml = n; if (e !== undefined) e() }, error: function () { throw "Error: Something went wrong" } }) }; Rank.prototype.getNodes = function (e, t) { var n = $(this.xml).find(e); var r = new Array; var i; var s; for (var o = 0; o < t; o++) { if (n[o] === undefined) break; s = n[o]; i = new Object; i.name = $(s).find("name").eq(0).text(); i.time = $(s).find("time").eq(0).text(); i.errors = Math.floor($(s).find("errors").eq(0).text()); i.points = Math.floor($(s).find("points").eq(0).text()); r.push(i) } return r }; Rank.prototype.addNode = function (e, t, n, r) { $.ajax({ url: "php/xmlWriter.php", data: "write=1&name=" + e + "&errors=" + t + "&time=" + n + "&points=" + r + "", type: "POST", success: function (e) { }, error: function () { throw "Error: Something went wrong in Rank.prototype.addNode" } }) }; var start = null; SoundLoader = function (e, t, n) { this.errors = new Array; this.total = 0; this.loaded = 0; this.percentage = 0; this.loading = false; this.oncomplete = e !== undefined ? e : undefined; this.onerror = n !== undefined ? n : undefined; this.onprogress = t !== undefined ? t : undefined; this.sources = [] }; SoundLoader.prototype.addSrc = function (e, t) { if (e !== undefined) { this.sources.push({ src: e, onLoad: t }) } this.total = this.sources.length }; SoundLoader.prototype.startLoading = function () { for (var e = 0; e <= this.total - 1; e++) this.loadSound(this.sources[e].src, this.sources[e].onLoad) }; SoundLoader.prototype.loadSound = function (e, t) { var n = this; var r; this.loading = true; r = new Audio; r.addEventListener("canplaythrough", function () { if (t !== undefined) t(this); n.loaded++; n.percentage = n.loaded * 100 / n.total; if (n.onprogress !== undefined) n.onprogress(this); if (n.percentage === 100) { n.loading = false; if (n.oncomplete !== undefined) return n.oncomplete() } }); r.addEventListener("error", function () { n.errors.push(e); if (n.onerror !== undefined) return n.onerror(this) }); r.src = e }; ImageLoader = function (e, t, n) { this.errors = []; this.total = 0; this.loaded = 0; this.percentage = 0; this.loading = false; this.oncomplete = e !== undefined ? e : undefined; this.onerror = n !== undefined ? n : undefined; this.onprogress = t !== undefined ? t : undefined; this.crossOrigin = true; this.sources = [] }; ImageLoader.prototype.addSrc = function (e, t) { if (e !== undefined) { this.sources.push({ src: e, onLoad: t }) } this.total = this.sources.length }; ImageLoader.prototype.startLoading = function () { for (var e = 0; e <= this.total - 1; e++) this.loadImage(this.sources[e].src, this.sources[e].onLoad) }; ImageLoader.prototype.loadImage = function (e, t) { var n = this; var r; this.loading = true; r = new Image; r.onload = function () { if (t !== undefined) t(this); n.loaded++; n.percentage = n.loaded * 100 / n.total; if (n.onprogress !== undefined) n.onprogress(); if (n.percentage === 100) { n.loading = false; if (n.oncomplete !== undefined) return n.oncomplete() } }; r.onerror = function () { n.errors.push(e); if (n.onerror !== undefined) return n.onerror(this) }; r.crossOrigin = this.crossOrigin; r.src = e }; Input = function (e, t) { this.keys = { keyUp: false, keyDown: false, keyLeft: false, keyRight: false, keySpace: false, keyCtrl: false, keyShift: false, keyAlt: false, keyEsc: false, keyDel: false, keyCapsL: false, keyPageUp: false, keyPageDown: false, keyEnter: false, keyF1: false, keyF2: false, keyF3: false, keyF4: false, keyF5: false, keyF6: false, keyF7: false, keyF8: false, keyF9: false, keyF10: false, keyF11: false, keyF12: false, key1: false, key2: false, key3: false, key4: false, key5: false, key6: false, key7: false, key8: false, key9: false, key0: false, keyA: false, keyB: false, keyC: false, keyD: false, keyE: false, keyF: false, keyG: false, keyH: false, keyI: false, keyJ: false, keyK: false, keyL: false, keyM: false, keyN: false, keyO: false, keyP: false, keyQ: false, keyR: false, keyS: false, keyT: false, keyU: false, keyV: false, keyW: false, keyX: false, keyY: false, keyZ: false, keySubtract: false, keyAdd: false, keyMultiply: false, keyDecimalPoint: false, keyDivide: false }; this.heldTime = new Array; this.mouse = { position: { x: null, y: null }, leftButton: false, middleButton: false, rightButton: false, wheelDelta: null } }; Input.prototype.init = function (e, t) { var e = e !== undefined ? e : document; return this.initKeyboard().initMouse(e, true, t) }; Input.prototype.initKeyboard = function () { var e = this; window.addEventListener("keydown", function (t) { t = window.event || t; switch (t.which) { case 39: e.keys.keyRight = e.held("keyRight", true); break; case 37: e.keys.keyLeft = e.held("keyLeft", true); break; case 38: e.keys.keyUp = e.held("keyUp", true); break; case 40: e.keys.keyDown = e.held("keyDown", true); break; case 17: e.keys.keyCtrl = e.held("keyCtrl", true); break; case 16: e.keys.keyShift = e.held("keyShift", true); break; case 18: e.keys.keyAlt = e.held("keyAlt", true); break; case 32: e.keys.keySpace = e.held("keySpace", true); break; case 27: e.keys.keyEsc = e.held("keyEsc", true); break; case 46: e.keys.keyDel = e.held("keyDel", true); break; case 20: e.keys.keyCapsL = e.held("keyCapsL", true); break; case 33: e.keys.keyPageUp = e.held("keyPageUp", true); break; case 34: e.keys.keyPageDown = e.held("keyPageDown", true); break; case 13: e.keys.keyEnter = e.held("keyEnter", true); break; case 112: e.keys.keyF1 = e.held("keyF1", true); break; case 113: e.keys.keyF2 = e.held("keyF2", true); break; case 114: e.keys.keyF3 = e.held("keyF3", true); break; case 115: e.keys.keyF4 = e.held("keyF4", true); break; case 116: e.keys.keyF5 = e.held("keyF5", true); break; case 117: e.keys.keyF6 = e.held("keyF6", true); break; case 118: e.keys.keyF7 = e.held("keyF7", true); break; case 119: e.keys.keyF8 = e.held("keyF8", true); break; case 120: e.keys.keyF9 = e.held("keyF9", true); break; case 121: e.keys.keyF10 = e.held("keyF10", true); break; case 122: e.keys.keyF11 = e.held("keyF11", true); break; case 123: e.keys.keyF12 = e.held("keyF12", true); break; case 48: e.keys.key0 = e.held("key0", true); break; case 49: e.keys.key1 = e.held("key1", true); break; case 50: e.keys.key2 = e.held("key2", true); break; case 51: e.keys.key3 = e.held("key3", true); break; case 52: e.keys.key4 = e.held("key4", true); break; case 53: e.keys.key5 = e.held("key5", true); break; case 54: e.keys.key6 = e.held("key6", true); break; case 55: e.keys.key7 = e.held("key7", true); break; case 56: e.keys.key8 = e.held("key8", true); break; case 57: e.keys.key9 = e.held("key9", true); break; case 65: e.keys.keyA = e.held("keyA", true); break; case 66: e.keys.keyB = e.held("keyB", true); break; case 67: e.keys.keyC = e.held("keyC", true); break; case 68: e.keys.keyD = e.held("keyD", true); break; case 69: e.keys.keyE = e.held("keyE", true); break; case 70: e.keys.keyF = e.held("keyF", true); break; case 71: e.keys.keyG = e.held("keyG", true); break; case 72: e.keys.keyH = e.held("keyH", true); break; case 73: e.keys.keyI = e.held("keyI", true); break; case 74: e.keys.keyJ = e.held("keyJ", true); break; case 75: e.keys.keyK = e.held("keyK", true); break; case 76: e.keys.keyL = e.held("keyL", true); break; case 77: e.keys.keyM = e.held("keyM", true); break; case 78: e.keys.keyN = e.held("keyN", true); break; case 79: e.keys.keyO = e.held("keyO", true); break; case 80: e.keys.keyP = e.held("keyP", true); break; case 81: e.keys.keyQ = e.held("keyQ", true); break; case 82: e.keys.keyR = e.held("keyR", true); break; case 83: e.keys.keyS = e.held("keyS", true); break; case 84: e.keys.keyT = e.held("keyT", true); break; case 85: e.keys.keyU = e.held("keyU", true); break; case 86: e.keys.keyV = e.held("keyV", true); break; case 87: e.keys.keyW = e.held("keyW", true); break; case 88: e.keys.keyX = e.held("keyX", true); break; case 89: e.keys.keyY = e.held("keyY", true); break; case 90: e.keys.keyZ = e.held("keyZ", true); break; case 106: e.keys.keyMultiply = e.held("keyMultiply", true); break; case 107: e.keys.keyAdd = e.held("keyAdd", true); break; case 109: e.keys.keySubtract = e.held("keySubtract", true); break; case 110: e.keys.keyDecimalPoint = e.held("keyDecimalPoint", true); break; case 111: e.keys.keyDivide = e.held("keyDivide", true); break; default: break } }); window.addEventListener("keyup", function (t) { t = window.event || t; switch (t.which) { case 39: e.keys.keyRight = e.held("keyRight", false); break; case 37: e.keys.keyLeft = e.held("keyLeft", false); break; case 38: e.keys.keyUp = e.held("keyUp", false); break; case 40: e.keys.keyDown = e.held("keyDown", false); break; case 17: e.keys.keyCtrl = e.held("keyCtrl", false); break; case 16: e.keys.keyShift = e.held("keyShift", false); break; case 18: e.keys.keyAlt = e.held("keyAlt", false); break; case 32: e.keys.keySpace = e.held("keySpace", false); break; case 27: e.keys.keyEsc = e.held("keyEsc", false); break; case 46: e.keys.keyDel = e.held("keyDel", false); break; case 20: e.keys.keyCapsL = e.held("keyCapsL", false); break; case 33: e.keys.keyPageUp = e.held("keyPageUp", false); break; case 34: e.keys.keyPageDown = e.held("keyPageDown", false); break; case 13: e.keys.keyEnter = e.held("keyEnter", false); break; case 112: e.keys.keyF1 = e.held("keyF1", false); break; case 113: e.keys.keyF2 = e.held("keyF2", false); break; case 114: e.keys.keyF3 = e.held("keyF3", false); break; case 115: e.keys.keyF4 = e.held("keyF4", false); break; case 116: e.keys.keyF5 = e.held("keyF5", false); break; case 117: e.keys.keyF6 = e.held("keyF6", false); break; case 118: e.keys.keyF7 = e.held("keyF7", false); break; case 119: e.keys.keyF8 = e.held("keyF8", false); break; case 120: e.keys.keyF9 = e.held("keyF9", false); break; case 121: e.keys.keyF10 = e.held("keyF10", false); break; case 122: e.keys.keyF11 = e.held("keyF11", false); break; case 123: e.keys.keyF12 = e.held("keyF12", false); break; case 48: e.keys.key0 = e.held("key0", false); break; case 49: e.keys.key1 = e.held("key1", false); break; case 50: e.keys.key2 = e.held("key2", false); break; case 51: e.keys.key3 = e.held("key3", false); break; case 52: e.keys.key4 = e.held("key4", false); break; case 53: e.keys.key5 = e.held("key5", false); break; case 54: e.keys.key6 = e.held("key6", false); break; case 55: e.keys.key7 = e.held("key7", false); break; case 56: e.keys.key8 = e.held("key8", false); break; case 57: e.keys.key9 = e.held("key9", false); break; case 65: e.keys.keyA = e.held("keyA", false); break; case 66: e.keys.keyB = e.held("keyB", false); break; case 67: e.keys.keyC = e.held("keyC", false); break; case 68: e.keys.keyD = e.held("keyD", false); break; case 69: e.keys.keyE = e.held("keyE", false); break; case 70: e.keys.keyF = e.held("keyF", false); break; case 71: e.keys.keyG = e.held("keyG", false); break; case 72: e.keys.keyH = e.held("keyH", false); break; case 73: e.keys.keyI = e.held("keyI", false); break; case 74: e.keys.keyJ = e.held("keyJ", false); break; case 75: e.keys.keyK = e.held("keyK", false); break; case 76: e.keys.keyL = e.held("keyL", false); break; case 77: e.keys.keyM = e.held("keyM", false); break; case 78: e.keys.keyN = e.held("keyN", false); break; case 79: e.keys.keyO = e.held("keyO", false); break; case 80: e.keys.keyP = e.held("keyP", false); break; case 81: e.keys.keyQ = e.held("keyQ", false); break; case 82: e.keys.keyR = e.held("keyR", false); break; case 83: e.keys.keyS = e.held("keyS", false); break; case 84: e.keys.keyT = e.held("keyT", false); break; case 85: e.keys.keyU = e.held("keyU", false); break; case 86: e.keys.keyV = e.held("keyV", false); break; case 87: e.keys.keyW = e.held("keyW", false); break; case 88: e.keys.keyX = e.held("keyX", false); break; case 89: e.keys.keyY = e.held("keyY", false); break; case 90: e.keys.keyZ = e.held("keyZ", false); break; case 106: e.keys.keyMultiply = e.held("keyMultiply", false); break; case 107: e.keys.keyAdd = e.held("keyAdd", false); break; case 109: e.keys.keySubtract = e.held("keySubtract", false); break; case 110: e.keys.keyDecimalPoint = e.held("keyDecimalPoint", false); break; case 111: e.keys.keyDivide = e.held("keyDivide", false); break; default: break } }); return this }; Input.prototype.key = function (e) { return this.keys[e] }; Input.prototype.held = function (e, t) { if (this.getHeldTime(e) && !t) return this.heldTime[e] = null; if (!this.heldTime[e] && t == true) return this.heldTime[e] = new Date; return this.heldTime[e] }; Input.prototype.getHeldTime = function (e) { if (this.heldTime[e]) return new Date - this.heldTime[e]; else return 0 }; Input.prototype.initMouse = function (e, t, n) { var r = this; $(e).mousemove(function (e) { e = $.event.fix(e); if (n) e.preventDefault(); r.mouse.position.x = e.pageX; r.mouse.position.y = e.pageY }).mousedown(function (e) { e = $.event.fix(e); if (n) e.preventDefault(); switch (e.which) { case 1: r.mouse.leftButton = true; break; case 2: r.mouse.middleButton = true; break; case 3: r.mouse.rightButton = true; break; default: break } }).mouseup(function (e) { e = $.event.fix(e); if (n) e.preventDefault(); switch (e.which) { case 1: r.mouse.leftButton = false; break; case 2: r.mouse.middleButton = false; break; case 3: r.mouse.rightButton = false; break; default: break } }); if (!t) return; $(e).bind("mousewheel", function (e) { e = window.event || e; if (n) e.preventDefault(); r.mouse.wheelDelta = Math.max(-1, Math.min(1, e.wheelDelta || -e.detail)) }).bind("DOMMouseScroll", function (e) { e = window.event || e; if (n) e.preventDefault(); r.mouse.wheelDelta = Math.max(-1, Math.min(1, e.wheelDelta || -e.detail)) }); setInterval(function () { r.mouse.wheelDelta = 0 }, 50); return this }; var faces = { peppeS: 6, akg: 6, peppeF: 6, feet: 6, rosarioM: 6, dick: 6, skull: 1, richardB: 6, guitar: 6 }; var a_sup = "slidingUp"; var a_sdown = "slidingDown"; var a_right = "slideRightDisappear"; Card.prototype.update = function () { if (this.h === 0) return; if (this.isHover()) { this.backBg = src.cardbackHover; this.mouseOver = true } else { this.backBg = src.cardback; this.mouseOver = false } if (g.canSelect()) if (!this.isAnimating()) if (g._in.mouse.leftButton === true) if (this.isHover()) { stopSound(snds.pop[type][0]).play(); this.action = a_sup; stopSound(snds.cardSlideUp[type][0]).play(); if (g.firstCard === null) g.firstCard = this; else g.secondCard = this } if (this.action !== null) this.performAction(); if (this.guessed === true && this.h === 4) this.h = 0 }; Card.prototype.isHover = function () { var e = mouseToCanvas(g._in.mouse.position); if (e.x <= this.position.x + this.w && e.x >= this.position.x && e.y <= this.position.y + this.h && e.y >= this.position.y) return true; return false }; Card.prototype.performAction = function () { switch (this.action) { case a_sup: this.h -= this.vel; this.vel += this.acc; if (this.h <= 4) { this.h = 4; this.action = null; this.vel = 0 } break; case a_sdown: this.h += this.vel; this.vel += this.acc / 8; if (this.h >= 60) { this.h = 60; this.action = null; this.vel = 0; if (g.secondCard === this) g.secondCard = null; if (g.firstCard === this) g.firstCard = null } break; case a_right: this.position.x += this.vel; this.vel += this.acc; if (this.position.x >= g.cv.width) { this.action = null; this.vel = 0; g.gcards.splice(g.gcards.indexOf(this), 1) } break } }; Card.prototype.isAnimating = function () { return this.action === null ? false : this.action }; Card.prototype.getFaceLink = function () { switch (this.face.name) { case "peppeS": return this.faceLink = "akg"; case "akg": return this.faceLink = "peppeS"; case "peppeF": return this.faceLink = "feet"; case "feet": return this.faceLink = "peppeF"; case "rosarioM": return this.faceLink = "dick"; case "dick": return this.faceLink = "rosarioM"; case "richardB": return this.faceLink = "guitar"; case "guitar": return this.faceLink = "richardB" } }; Number.prototype.update = function () { this.vel += this.acc; this.position.y -= this.vel; this.opacity -= .01; if (this.opacity <= 0) this.remove = true }; "use strict"; $(window).load(function () { g.cv = document.getElementById("cv"); g.ctx = g.cv.getContext("2d"); g.r = new Renderer; wre = new Wre; g._in = new Input; g._in.init(document); wre.addEvent(function () { $("body").width(window.innerWidth).height(window.innerHeight) }, "wndResize"); $(document).keyup(function (e) { var t = getKey(e); if (t == 44) { alert("Ehi furbacchione! Adesso col cavolo che giochi!"); g.playing = false; g.maxCards = 1 } }); if (ieVer() !== false) $("#advice").css("display", "block"); loadSrcs(function () { setTimeout(function () { slideUpCover(); loadNameForm(); startSoundtrack() }, 1e3) }).startLoading(); g.rank = new Rank(function () { loadRank() }); $("#tableCont").slimScroll({ height: "270px", railVisible: true, alwaysVisible: true }); setInterval(function () { g.rank = new Rank(function () { loadRank() }) }, 5e3) }); var combo = false; Renderer.prototype.rect = function (e, t, n, r, i, s, o) { g.ctx.fillStyle = i !== undefined ? i : "transparent"; g.ctx.strokeStyle = s !== undefined ? s : "transparent"; g.ctx.rect(e, t, n, r); if (o !== undefined) { g.ctx.shadowColor = o.color; g.ctx.shadowBlur = o.blur; g.ctx.shadowOffsetX = o.offsetX; g.ctx.shadowOffsetY = o.offsetY } g.ctx.fill(); g.ctx.stroke(); return this }; Renderer.prototype.drawBoard = function () { g.ctx.save(); g.ctx.beginPath(); g.r.rect(board.position.x, board.position.y, board.width, board.height, "white", "#ddd", { color: "black", offsetX: 0, offsetY: 0, blur: 0 }); g.ctx.closePath(); g.ctx.drawImage(bgBoard, 25, 25, 450, 450); g.ctx.restore(); return this }; Renderer.prototype.drawBg = function () { var e; g.ctx.save(); g.ctx.beginPath(); e = g.ctx.createPattern(src.bgPat, "repeat"); this.rect(0, 0, g.cv.width, g.cv.height, e); g.ctx.closePath(); g.ctx.restore(); return this }; Renderer.prototype.render = function () { this.clear(); this.drawBg(); this.drawBoard(); this.drawCards(); this.drawElapsed(); this.drawPoints(); if (!g.start) this.drawCountdownNumber(); if (this.finalScreen) this.finalScreen.drawScreen(); return this }; Renderer.prototype.clear = function () { g.ctx.save(); g.ctx.fillRect(0, 0, g.cv.width, g.cv.height); g.ctx.restore(); return this }; Renderer.prototype.drawCards = function () { for (var e in g.gcards) { if (g.gcards[e] instanceof Card) this.drawCard(g.gcards[e]); else if (g.gcards[e] instanceof Number) this.drawNumber(g.gcards[e]) } }; Renderer.prototype.drawCard = function (e) { if (e === undefined || !e instanceof Card) return false; var t = undefined; if (e.guessed) return; g.ctx.save(); g.ctx.beginPath(); this.rect(e.position.x - 2.5, e.position.y - 2.5, 65, 65, "white", "#333"); g.ctx.closePath(); g.ctx.drawImage(e.face.src, 0, 0, e.face.src.width, e.face.src.height, e.position.x, e.position.y, e.face.src.width, e.face.src.height); g.ctx.restore(); g.ctx.save(); g.ctx.beginPath(); if (e.mouseOver === true || e.h == 4) t = { color: "#36611D", offsetX: 0, offsetY: 0, blur: 15 }; this.rect(e.position.x, e.position.y, e.w, e.h, "#19B9E3", undefined, t); g.ctx.drawImage(e.backBg, 0, 0, e.w, e.h, e.position.x, e.position.y, e.w, e.h); g.ctx.closePath(); g.ctx.restore() }; Renderer.prototype.drawCursor = function () { var e = new Point; e = mouseToCanvas(g._in.mouse.position); g.ctx.drawImage(src.cursor, e.x, e.y, src.cursor.width, src.cursor.height) }; Renderer.prototype.drawNumber = function (e) { g.ctx.save(); g.ctx.beginPath(); g.ctx.globalAlpha = e.opacity; g.ctx.drawImage(e.src, e.position.x, e.position.y, e.src.width, e.src.height); g.ctx.closePath(); g.ctx.restore() }; Renderer.prototype.drawElapsed = function () { g.ctx.save(); g.ctx.font = "11pt Calibri"; g.ctx.fillStyle = "black"; g.ctx.drawImage(src.clock20, 20, 486, 20, 20); g.ctx.fillText("" + g.elapsedTime, 44, 501); g.ctx.restore() }; Renderer.prototype.drawPoints = function () { g.ctx.save(); g.ctx.drawImage(src.star20, 440, 1, 20, 20); g.ctx.font = "12pt Calibri"; g.ctx.fillStyle = "black"; g.ctx.fillText("" + p.points, 462, 16); g.ctx.restore(); g.ctx.save(); g.ctx.drawImage(src.error20, 390, 1, 20, 20); g.ctx.font = "12pt Calibri"; g.ctx.fillStyle = "black"; g.ctx.fillText("" + p.wrongs, 413, 16); g.ctx.restore() }; Renderer.prototype.drawCountdownNumber = function () { g.ctx.save(); switch (g.timeToStart) { case 2: g.ctx.drawImage(src.n1, 125, 70, src.n1.width, src.n2.height); break; case 1: g.ctx.drawImage(src.n2, 125, 70, src.n1.width, src.n2.height); break; case 0: g.ctx.drawImage(src.n3, 125, 70, src.n1.width, src.n2.height); break } g.ctx.restore() }; FinalScreen.prototype.update = function () { this.z -= .001; if (this.position.y < 0) { this.position.y += this.vel += this.acc } else { if (this.total != p.points) this.total += .5 } }; FinalScreen.prototype.drawScreen = function () { g.ctx.save(); g.ctx.beginPath(); g.r.rect(this.position.x, this.position.y, this.w, this.h, "#235EA2", "#333", { blur: 10, offsetY: 2, offsetX: 0, color: "#000" }); if (this.total > 0) { g.ctx.save(); g.ctx.font = "25pt Calibri"; g.ctx.fillStyle = "#E0572A"; g.ctx.fillText("Complimenti! Hai totalizzato", 60, 200); if (this.total === p.points) str = this.total + " punti"; else str = this.total; var e = g.ctx.measureText(str).width; g.ctx.fillText(str, g.cv.width / 2 - e / 2, 250); g.ctx.restore() } if (this.total === p.points && p.points < firstPositionPoints) { g.ctx.save(); g.ctx.font = "20pt Calibri"; g.ctx.fillStyle = "#E0572A"; g.ctx.fillText("...ma ti mancano ancora " + (firstPositionPoints - p.points) + " punti ", 75, 290); g.ctx.fillText("per raggiungere la prima posizione!", 75, 320); g.ctx.restore() } else if (this.total === p.points && p.points >= firstPositionPoints) { g.ctx.save(); g.ctx.font = "20pt Calibri"; g.ctx.fillStyle = "#5ABD5E"; g.ctx.fillText("E SEI IN PRIMA POSIZIONE!", 100, 290); g.ctx.drawImage(src.trophy, 195, 300, src.trophy.width, src.trophy.height); g.ctx.restore() } g.ctx.closePath() }; Wre = function () { this.funcs = new Array; this.init() }; Wre.prototype.init = function () { var e = this; window.onresize = function () { for (var t in e.funcs) e.funcs[t].f() } }; Wre.prototype.addEvent = function (e, t, n) { if (e !== undefined && isFunction(e)) this.funcs.push({ f: e, n: t || "" }); if (n === true) e(); return this }; Wre.prototype.removeEvent = function (e) { for (var t in this.funcs) if (this.funcs[t].n === e) this.funcs.splice(t, 1); return this }; Wre.prototype.haveEvent = function (e) { for (var t in this.funcs) if (this.funcs[t].n === e) return true; return false }